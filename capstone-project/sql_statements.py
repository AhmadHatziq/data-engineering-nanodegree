"""
    This file contains the SQL statements which
    will be used by etl.py.
"""

# Read in arn role
import configparser
config = configparser.ConfigParser()
config.read('dwh.cfg')
arn_role = config.get("DWH", "dwh_role_arn")

# CREATE TABLE, IF EXISTS STATEMENTS
CREATE_IMDB_TITLE_AKAS = ("""
CREATE TABLE IF NOT EXISTS IMDB_TITLE_AKAS
(
    TITLE_ID VARCHAR(15) PRIMARY KEY,
    ORDERING INT,
    TITLE VARCHAR(900),
    REGION VARCHAR(5),
    LANGUAGE VARCHAR(5),
    TYPES VARCHAR(25),
    ATTRIBUTES VARCHAR(70),
    IS_ORIGINAL_TITLE INT 
);
""")

CREATE_IMDB_TITLE_PRINCIPALS = ("""
CREATE TABLE IF NOT EXISTS IMDB_TITLE_PRINCIPALS
(
  TITLE_ID VARCHAR(15) PRIMARY KEY,
  NAME_ID VARCHAR(15), 
  ORDERING INT, 
  CATEGORY VARCHAR(25), 
  JOB VARCHAR(300), 
  CHARACTERS VARCHAR (500) 
);
""")

CREATE_IMDB_TITLE_BASICS = ("""
CREATE TABLE IF NOT EXISTS IMDB_TITLE_BASICS
(
  TITLE_ID VARCHAR (15) PRIMARY KEY,
  TITLE_TYPE VARCHAR (15), 
  PRIMARY_TITLE VARCHAR (500), 
  ORIGINAL_TITLE VARCHAR (500), 
  IS_ADULT INT, 
  START_YEAR INT, 
  END_YEAR INT, 
  RUNTIME_MINUTES INT, 
  GENRES VARCHAR (40)
);
""")

CREATE_IMDB_TITLE_CREW = ("""
CREATE TABLE IF NOT EXISTS IMDB_TITLE_CREW
(
  TITLE_ID VARCHAR (15) PRIMARY KEY, 
  DIRECTORS VARCHAR (5000),
  WRITERS VARCHAR (15000)
);
""")

CREATE_IMDB_TITLE_EPISODE = ("""
CREATE TABLE IF NOT EXISTS IMDB_TITLE_EPISODE
(
  TITLE_ID VARCHAR (15) PRIMARY KEY,
  PARENT_TITLE_ID VARCHAR (15), 
  SEASON_NUMBER INT,
  EPISODE_NUMBER INT
);
""")

CREATE_IMDB_TITLE_RATINGS = ("""
CREATE TABLE IF NOT EXISTS IMDB_TITLE_RATINGS
(
  TITLE_ID VARCHAR (15) PRIMARY KEY,
  AVERAGE_RATING FLOAT, 
  NUM_VOTES INT 
);
""")

CREATE_IMDB_NAME_BASICS = ("""
CREATE TABLE IF NOT EXISTS IMDB_NAME_BASICS
(
  NAME_ID VARCHAR (15) PRIMARY KEY,
  PRIMARY_NAME VARCHAR (150), 
  BIRTH_YEAR INT, 
  DEATH_YEAR INT,
  PRIMARY_PROFESSION VARCHAR (100), 
  KNOWN_FOR_TITLES VARCHAR (100)
);
""")

CREATE_KAGGLE_MOVIES_METADATA = ("""
 CREATE TABLE IF NOT EXISTS KAGGLE_MOVIES_METADATA
(
  ADULT VARCHAR (500),
  BELONGS_TO_COLLECTION VARCHAR (400) ,
  BUDGET INT  ,
  GENRES VARCHAR (300),
  HOMEPAGE VARCHAR (350) ,
  TMDB_ID INT PRIMARY KEY,
  IMDB_ID VARCHAR (150) ,
  ORIGINAL_LANGUAGE VARCHAR (150) ,
  ORIGINAL_TITLE VARCHAR (200) ,
  OVERVIEW VARCHAR (2000) ,
  POPULARITY VARCHAR (700) ,
  POSTER_PATH VARCHAR (1000) ,
  PRODUCTION_COMPANIES VARCHAR (1400) ,
  PRODUCTION_COUNTRIES VARCHAR (1200) ,
  RELEASE_DATE VARCHAR (800),
  REVENUE INT  ,
  RUNTIME FLOAT ,
  SPOKEN_LANGUAGES VARCHAR (800) ,
  STATUS VARCHAR (800) ,
  TAGLINE VARCHAR (400) ,
  TITLE VARCHAR (400) ,
  IS_VIDEO VARCHAR (350) ,
  VOTE_AVERAGE FLOAT ,
  VOTE_COUNT INT 
);
""")

CREATE_KAGGLE_KEYWORDS = ("""
CREATE TABLE IF NOT EXISTS KAGGLE_KEYWORDS
(
  TMDB_ID INT PRIMARY KEY,
  KEYWORDS VARCHAR (6000)
);
""")

CREATE_KAGGLE_CREDITS = ("""
CREATE TABLE IF NOT EXISTS KAGGLE_CREDITS
(
  TMDB_ID INT PRIMARY KEY ,
  MOVIE_CAST VARCHAR (35000) ,
  MOVIE_CREW VARCHAR (35000)
);
""")

CREATE_KAGGLE_LINKS = ("""
CREATE TABLE IF NOT EXISTS KAGGLE_LINKS
(
  LINKS_ID INT PRIMARY KEY,
  TMDB_ID INT ,
  IMDB_ID VARCHAR (15)
);
""")

CREATE_KAGGLE_RATINGS = ("""
CREATE TABLE IF NOT EXISTS KAGGLE_RATINGS
(
  USER_ID INT PRIMARY KEY,
  TMDB_ID INT ,
  RATING FLOAT, 
  TIMESTAMP BIGINT 
);
""")

CREATE_TABLE_STATEMENTS = [
    CREATE_IMDB_TITLE_AKAS,
    CREATE_IMDB_TITLE_PRINCIPALS,
    CREATE_IMDB_TITLE_BASICS,
    CREATE_IMDB_TITLE_CREW,
    CREATE_IMDB_TITLE_EPISODE,
    CREATE_IMDB_TITLE_RATINGS,
    CREATE_IMDB_NAME_BASICS,
    CREATE_KAGGLE_MOVIES_METADATA,
    CREATE_KAGGLE_KEYWORDS,
    CREATE_KAGGLE_CREDITS,
    CREATE_KAGGLE_LINKS,
    CREATE_KAGGLE_RATINGS
]

# COPY TABLE FROM PARQUET STATEMENTS
COPY_IMDB_TITLE_AKAS = ("""
TRUNCATE TABLE IMDB_TITLE_AKAS ;
COPY IMDB_TITLE_AKAS
FROM 's3://udacity-dend-capstone-1995/parquet/imdb-akas/'
IAM_ROLE '{}'
FORMAT AS PARQUET;
""").format(arn_role)

COPY_IMDB_TITLE_PRINCIPALS = ("""
TRUNCATE TABLE IMDB_TITLE_PRINCIPALS;
COPY IMDB_TITLE_PRINCIPALS
FROM 's3://udacity-dend-capstone-1995/parquet/imdb-principal/'
IAM_ROLE '{}'
FORMAT AS PARQUET;
""").format(arn_role)

COPY_IMDB_TITLE_BASICS = ("""
TRUNCATE TABLE IMDB_TITLE_BASICS   ;
COPY IMDB_TITLE_BASICS
FROM 's3://udacity-dend-capstone-1995/parquet/imdb-basics/'
IAM_ROLE '{}'
FORMAT AS PARQUET; 
 """).format(arn_role)

COPY_IMDB_TITLE_CREW = ("""
TRUNCATE TABLE  IMDB_TITLE_CREW  ;
COPY IMDB_TITLE_CREW
FROM 's3://udacity-dend-capstone-1995/parquet/imdb-crew/'
IAM_ROLE 'arn:aws:iam::904972942839:role/dwhRole'
FORMAT AS PARQUET;
""").format(arn_role)

COPY_IMDB_TITLE_EPISODE = ("""
TRUNCATE TABLE  IMDB_TITLE_EPISODE  ;
COPY IMDB_TITLE_EPISODE
FROM 's3://udacity-dend-capstone-1995/parquet/imdb-episode/'
IAM_ROLE '{}'
FORMAT AS PARQUET;
""").format(arn_role)

COPY_IMDB_TITLE_RATINGS = ("""
TRUNCATE TABLE  IMDB_TITLE_RATINGS  ;
COPY IMDB_TITLE_RATINGS
FROM 's3://udacity-dend-capstone-1995/parquet/imdb-rating/'
IAM_ROLE '{}'
FORMAT AS PARQUET;
""").format(arn_role)

COPY_IMDB_NAME_BASICS = ("""
TRUNCATE TABLE  IMDB_NAME_BASICS  ;
COPY IMDB_NAME_BASICS
FROM 's3://udacity-dend-capstone-1995/parquet/imdb-name-basic/'
IAM_ROLE '{}'
FORMAT AS PARQUET;
""").format(arn_role)

COPY_KAGGLE_MOVIES_METADATA = ("""
TRUNCATE TABLE   KAGGLE_MOVIES_METADATA ;
COPY KAGGLE_MOVIES_METADATA
FROM 's3://udacity-dend-capstone-1995/parquet/kaggle-movie-metadata/'
IAM_ROLE '{}'
FORMAT AS PARQUET;
""").format(arn_role)

COPY_KAGGLE_KEYWORDS = ("""
TRUNCATE TABLE KAGGLE_KEYWORDS   ;
COPY KAGGLE_KEYWORDS
FROM 's3://udacity-dend-capstone-1995/parquet/kaggle-movie-keywords/'
IAM_ROLE '{}'
FORMAT AS PARQUET;
""").format(arn_role)

COPY_KAGGLE_CREDITS = ("""
TRUNCATE TABLE  KAGGLE_CREDITS  ;
COPY KAGGLE_CREDITS
FROM 's3://udacity-dend-capstone-1995/parquet/kaggle-movie-credits/'
IAM_ROLE '{}'
FORMAT AS PARQUET;
""").format(arn_role)

COPY_KAGGLE_LINKS = ("""
TRUNCATE TABLE  KAGGLE_LINKS  ;
COPY KAGGLE_LINKS
FROM 's3://udacity-dend-capstone-1995/parquet/kaggle-movie-links/'
IAM_ROLE '{}'
FORMAT AS PARQUET;
""").format(arn_role)

COPY_KAGGLE_RATINGS = ("""
TRUNCATE TABLE KAGGLE_RATINGS;
COPY KAGGLE_RATINGS
FROM 's3://udacity-dend-capstone-1995/parquet/kaggle-movie-ratings/'
IAM_ROLE '{}'
FORMAT AS PARQUET;
""").format(arn_role)

COPY_IMDB_TABLES = [COPY_IMDB_TITLE_AKAS, 
                    COPY_IMDB_TITLE_PRINCIPALS,
                    COPY_IMDB_TITLE_BASICS,
                    COPY_IMDB_TITLE_CREW,
                    COPY_IMDB_TITLE_EPISODE,
                    COPY_IMDB_TITLE_RATINGS,
                    COPY_IMDB_NAME_BASICS
                   ]

COPY_KAGGLE_TABLES = [
    COPY_KAGGLE_MOVIES_METADATA,
    COPY_KAGGLE_KEYWORDS,
    COPY_KAGGLE_CREDITS,
    COPY_KAGGLE_LINKS,
    COPY_KAGGLE_RATINGS
]
